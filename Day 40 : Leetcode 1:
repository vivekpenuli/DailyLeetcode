fgh^^// K closest point //
public class KClosestPoints {
    public static int[][] kClosest(int[][] points, int k) {
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> distance(b) - distance(a));
        
        for (int[] point : points) {
            maxHeap.offer(point);
            
            if (maxHeap.size() > k) {
                maxHeap.poll();
            }
        }
        
        int[][] closestPoints = new int[k][2];
        int index = 0;
        while (!maxHeap.isEmpty()) {
            closestPoints[index++] = maxHeap.poll();
        }
        
        return closestPoints;
    }
    
    public static int distance(int[] point) {
        return point[0] * point[0] + point[1] * point[1];
    }
    
    public static void main(String[] args) {
        int[][] points = {{1, 3}, {-2, 2}, {5, 8}, {0, 1}, {2, 2}, {3, 4}};
        int k = 3;
        
        int[][] closestPoints = kClosest(points, k);
        
        for (int[] point : closestPoints) {
            System.out.println("[" + point[0] + ", " + point[1] + "]");
        }
    }


// Expected Output  //
