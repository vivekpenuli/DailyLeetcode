// K nearest Point //

import java.util.Arrays;
import java.util.PriorityQueue;

public class KClosestPointsToOrigin {
    public int[][] kClosest(int[][] points, int K) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> getDistance(b) - getDistance(a));

        for (int[] point : points) {
            pq.offer(point);
            if (pq.size() > K) {
                pq.poll();
            }
        }

        int[][] result = new int[K][2];
        int index = 0;
        while (!pq.isEmpty()) {
            result[index++] = pq.poll();
        }

        return result;
    }

    private int getDistance(int[] point) {
        return point[0] * point[0] + point[1] * point[1];
    }

    public static void main(String[] args) {
        int[][] points = { { 1, 3 }, { -2, 2 }, { 5, 8 }, { 0, 1 } };
        int K = 2;
        KClosestPointsToOrigin solution = new KClosestPoitsToOrigin();
        int[][] closestPoints = solution.kClosest(points, K);

        System.out.println("K closest points to origin:");
        for (int i = 0; i < K; i++) {
            System.out.println("(" + closestPoints[i][0] + ", " + closestPoints[i][1] + ")");
        }
    }
}

