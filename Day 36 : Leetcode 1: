
// 1.K Closest Points to Origin //
class Solution {
  int getDistance(int[] point) {
        return point[0] * point[0] + point[1] * point[1];
    }
    public int[][] kClosest(int[][] points, int k) {
         PriorityQueue<int[]> pq = new PriorityQueue<>((new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return getDistance(b) - getDistance(a); 
            }
        }));
        // Insert points into the priority queue
        for (int[] point : points) {
            pq.offer(point);
            if (pq.size() > k) {
                pq.poll();
            }
        }
        // Retrieve K closest points from the priority queue
        int[][] result = new int[k][2];
        int index = 0;
        while (!pq.isEmpty()) {
            result[index++] = pq.poll();
        }

        return result;   
    }
}

// For example, the following comparator class compares two integers in ascending order:
class IntegerComparator implements Comparator<Integer> {

    public int compare(Integer a, Integer b) {
        return a - b;
    }
}


